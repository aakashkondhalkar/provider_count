/// Flutter Google Crashlytics Example
///
/// This example demonstrates how to use google Crashlytics
/// The code explain how to report fetal and non-fetal exception and report to Crashlytics
///
/// Author: Aakash Kondhalkar
/// Date: Dec 3, 2023
///

/*
Configure you project in firebase.

Configure your project in google cloud developer console (https://console.cloud.google.com/apis/dashboard).

***** Need below pubs in pubspec.yaml in order run this code ******

 firebase_core: ^2.14.0
 firebase_crashlytics: ^3.4.6

*/

import 'dart:ui';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:flutter/material.dart';
import 'package:providercount/firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions
        .currentPlatform, // this options generated by default if you configure firebase using flutterfire CLI tool
  );

  // Pass all uncaught "fetal" errors from the framework to Crashlytics
  FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;

  // Pass all uncaught asynchronous errors that aren't handle by the flutter framework to Crashlytics
  PlatformDispatcher.instance.onError = (error, stack) {
    FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
    return true;
  };

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const GoogleCrashlyticsPage(),
    );
  }
}

class GoogleCrashlyticsPage extends StatefulWidget {
  const GoogleCrashlyticsPage({Key? key}) : super(key: key);

  @override
  State<GoogleCrashlyticsPage> createState() => _GoogleCrashlyticsPageState();
}

class _GoogleCrashlyticsPageState extends State<GoogleCrashlyticsPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Container(
        child: Container(
          alignment: Alignment.center,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              ElevatedButton(
                style:
                    ElevatedButton.styleFrom(backgroundColor: Colors.red[600]),
                onPressed: () {
                  // Throw fatal error which will report to crashlytics console
                  throw Exception("JUST FOR TEST");
                },
                child: const Text("Throw fetal exception"),
              ),
              ElevatedButton(
                  style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.yellow[600],
                      foregroundColor: Colors.black),
                  onPressed: () async {
                    // This will throw non-fetal exception
                    try {
                      int? a;
                      int b = 2;
                      int c = a! + b;
                    } catch (exception, stack) {
                      // Add custom keys
                      // Custom keys help you get the specific state of your app leading up to a crash.
                      // You can associate arbitrary key/value pairs with your crash reports,
                      // then use the custom keys to search and filter crash reports in the Firebase console.
                      FirebaseCrashlytics.instance
                          .setCustomKey("isLogged", true);
                      FirebaseCrashlytics.instance
                          .setCustomKey("version", "1.1.0");

                      // Add custom log message
                      // To give yourself more context for the events leading up to a crash,
                      // you can add custom Crashlytics logs to your app.
                      // Crashlytics associates the logs with your crash data and displays them in the Firebase console,
                      // under the Crashlytics Logs tab.
                      FirebaseCrashlytics.instance
                          .log("Exception throw on button click");

                      // Set user identifiers
                      // To diagnose an issue, itâ€™s often helpful to know which of your users experienced a given crash.
                      // Crashlytics includes a way to anonymously identify users in your crash reports.
                      FirebaseCrashlytics.instance.setUserIdentifier("5849");

                      // Report a non-fetal exception
                      // reason will be visible under `Stack trace` Tab along with the exception
                      // Information will be visible under `Logs` Tab
                      await FirebaseCrashlytics.instance.recordError(
                        exception,
                        stack,
                        printDetails: true,
                        reason: "A non-fetal error",
                        information: [
                          "Further diagnostic information about the error",
                          "version 2.0",
                          "user: aakash"
                        ],
                      );
                    }
                  },
                  child: const Text("Throw non-fetal exception"))
            ],
          ),
        ),
      ),
    );
  }
}
